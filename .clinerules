# プロジェクトガイドライン

## 指示
- あなたはプロのWebプログラマです。
- コンポーネントや関数は役割や責務に応じて適宜切り出してください。
- 不明点があったら作業を止めて質問してください。
- 保守しやすいように処理についてのコメントを残してください。

## サービス名
- LYNX

## サービス概要
ブロガーやアフィリエイター、自社のメディアサイトを運営しているWebマーケター向けのサイト管理ツールです。
主に記事同士の内部リンクの関係性を可視化・管理するためのツールです。

## システム構成
- フロントエンド
  - TypeScript
  - [ReactRouter v7](https://reactrouter.com/home)
  - [shadcn/ui](https://ui.shadcn.com/)
  - ReactHookForm
  - zod
  - react-icons
  - tailwindcss

- バックエンド
  - TypeScript
  - NestJS
  - Prisma
  - PostgreSQL

- スクレイピング用APIサーバー
  - Python
  - Scrapy
  - FastAPI

## 機能
### GoogleのOAuth認証
- Googleアカウントを利用したログイン・会員登録

### Webサイトのスクレイピングとコンテンツ情報の取得
- Webサイトの情報をスクレイピング・取得して編集・DBに保存する

### ダッシュボード
- DBから取得したWebサイトのコンテンツ情報の分析レポートを表示

### 内部リンク相関表
- 記事内の内部リンクの相関表をマップで表示し、視覚的にどの記事に内部リンクがある/ないのか判断する

## 実装方針
NestJSベストプラクティス要件
以下のベストプラクティスに従って実装してください:
1. アーキテクチャとモジュール構成

モジュールの適切な分割: 機能ごとに適切に分割されたモジュール構造
SOLID原則の遵守: 単一責任、開放/閉鎖、依存性逆転などの原則に従った設計
レイヤードアーキテクチャ: Controller, Service, Repository層の明確な分離
依存性注入: コンストラクタ注入を基本とした適切な依存性注入パターン
モジュールの再利用: 共通機能は独立したモジュールとして実装し再利用

2. コントローラー設計

RESTful設計原則: HTTPメソッドの適切な使用とリソース指向の設計
ルーティング: 論理的かつ一貫性のあるエンドポイント命名と構造
リクエスト検証: DTOとクラスバリデーターを用いた堅牢なリクエスト検証
レスポンス形式: 標準化されたレスポンス形式と適切なHTTPステータスコード
エラーハンドリング: グローバル例外フィルターを使用した一貫性のあるエラーレスポンス

3. サービス層実装

ビジネスロジックのカプセル化: サービスレイヤーにビジネスロジックを集中
トランザクション管理: 適切なトランザクション境界の設定
依存関係の最小化: 必要最小限の依存関係と明確なインターフェース
ドメイン駆動設計: 複雑なドメインロジックにはDDDパターンの採用
副作用の最小化: 純粋関数と副作用を持つ処理の分離

4. データアクセスパターン

リポジトリパターン: データアクセス処理をリポジトリに隠蔽
クエリ最適化: N+1問題を回避する効率的なクエリ設計
マイグレーション戦略: 安全かつ再現可能なデータベースマイグレーション
スキーマ設計: 適切な関係性とインデックスを持つデータベーススキーマ
キャッシュ戦略: 必要に応じた効率的なキャッシュの実装

5. 認証と認可

セキュアなJWT実装: 適切な有効期限、更新戦略、署名アルゴリズム
ロールベースのアクセス制御: Guard, Decoratorを活用した柔軟なRBAC
セキュリティのベストプラクティス: XSS, CSRF対策、レート制限の実装
認証情報保護: パスワードハッシュ化と機密情報の適切な保護
OAuth/OIDC統合: 必要に応じたサードパーティ認証の統合

6. バリデーションと例外処理

入力バリデーション: class-validator、class-transformerを活用した堅牢な検証
例外フィルター: カスタム例外と例外フィルターによる統一的なエラーハンドリング
ロギング戦略: 例外時の適切なロギングとモニタリング
優雅な障害処理: 部分的な障害に対する堅牢性とフォールバック
バリデーションパイプ: グローバルとエンドポイント固有のバリデーションパイプの適切な活用

7. パフォーマンスと最適化

キャッシュ活用: CacheModule/インターセプターによるレスポンスキャッシュ
非同期処理最適化: EventEmitter, QueueなどによるタスクのOffloading
データベース最適化: インデックス活用、クエリ最適化、コネクションプーリング
メモリ管理: 大きなペイロード処理時のストリーミングとメモリ使用量の考慮
水平スケーリング: ステートレスサービス設計によるスケーリング対応

8. テスト戦略

ユニットテスト: サービスとコントローラーの単体テスト
統合テスト: エンドツーエンドテストによるAPI検証
テスト分離: テスト間の依存関係を最小化する設計
テストデータ管理: 再現可能なテストデータセットアップ
モック活用: 外部依存のモックと適切なテスト環境設定

9. 構成と環境管理

ConfigService活用: ConfigModuleを使用した環境変数管理
環境分離: 開発、テスト、本番環境の適切な分離
シークレット管理: 機密情報の安全な管理
ロギング戦略: 構造化ロギングと適切なログレベル設定
ヘルスチェック: 本番環境監視のためのヘルスチェックエンドポイント

10. コード品質と保守性

リンター/フォーマッター: ESLint, Prettierによる一貫したコードスタイル
自動ドキュメント: Swaggerを使用したAPIドキュメンテーション
モジュール境界の明確化: 適切なエクスポートとカプセル化
命名規則の一貫性: NestJS規約に従った命名パターン
コメントと文書化: 複雑なロジックの適切な文書化